# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Channel_1_Ver_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os, io, json
import random
from pygame import mixer
# import webbrowser
import subprocess
mixer.init()



#Just in case
ai_info = "Settings.json"
workspace = "Work_station"



defultpath = f"{workspace}/cyclotron electromagnetic design.txt"


airnotes = "memory_bank"
updated_images = "memory_bank"
background = "x-5.jpg"


DownloadsFolderPictures = os.listdir(airnotes)
DownloadsFolderPictures.sort()

for file in DownloadsFolderPictures:
    if file.endswith(".DS_Store"):
        DownloadsFolderPictures.remove(file)



UpdatedPictures = os.listdir(updated_images)
UpdatedPictures.sort()

for file in UpdatedPictures:
    if file.endswith(".DS_Store"):
        UpdatedPictures.remove(file)



projects = os.listdir(workspace)
projects.sort()

for file in projects:
    if file.endswith(".DS_Store"):
        projects.remove(file)





def formula(scalar, new=1,old=1):
    return int(round(scalar +  ((new * scalar)/old)-scalar))



# new_x_dimention = 1440


#ORIGIONAL DIMENTIONS
QtWidth = 900
QtHeight = 563
factor = 1440/QtWidth #fills x axis

#New y length
old_y = 1 #factor *QtHeight
new_y = 1 #900 usually



def readproject(path=defultpath):
    myfile = io.open(path, "r", encoding="utf-8")
    filecontents = myfile.readlines()
    mypage = []
    for iterator in filecontents:
        mypage.append(iterator.split(":$:"))
    myfile.close()
    return mypage



def convert(scalar, factor, y=False, x=False):
    scalar_ = scalar
    if y or x:
        scalar = []
        for j, i in enumerate(scalar_):
            if j == 1 or j == 3: #comment out for x expansion
                scalar.append(formula(i, new = new_y, old = old_y))
                
            else:
                scalar.append(i)

    m = []
    for i in range(len(scalar)):
        m.append(int(round(scalar[i]*factor)))

    return m





class Ui_Form(object):
    def setupUi(self, Form):

        real_path = []
        for (root, dirs, file) in os.walk(workspace):
            for f in file:
                if '.txt' in f:
                    real_path.append(str(f"{root}/{f}"))



        Form.setObjectName("Form")
        Form.resize(1440, 900)
        self.label = QtWidgets.QLabel(Form)

        m = convert((0, 0, 900, 563), factor, y=True)
        self.label.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.label.setGeometry(QtCore.QRect(0, 0, 900, 563))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(background))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.Photo_1 = QtWidgets.QLabel(Form)
        m = convert((145, 60, 275, 391), factor, y=True)
        self.Photo_1.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.Photo_1.setGeometry(QtCore.QRect(199, 100, 220, 311))
        self.Photo_1.setText("")
        # self.Photo_1.setPixmap(QtGui.QPixmap(f"{airnotes}/IMG_5463.JPG"))
        self.Photo_1.setScaledContents(True)
        self.Photo_1.setObjectName("Photo_1")
        self.Photo_2 = QtWidgets.QLabel(Form)
        m = convert((485, 60, 275, 391), factor, y=True)
        self.Photo_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.Photo_2.setGeometry(QtCore.QRect(480, 100, 220, 311))
        self.Photo_2.setText("")
        # self.Photo_2.setPixmap(QtGui.QPixmap(f"{airnotes}/IMG_5464.JPG"))
        self.Photo_2.setScaledContents(True)
        self.Photo_2.setObjectName("Photo_2")



        #Project Info
        self.scrollArea = QtWidgets.QScrollArea(Form)

        self.scrollArea.setWidgetResizable(True)

        m = convert((3, 59, 110, 366), factor, y=True)
        self.scrollArea.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.scrollArea.setGeometry(QtCore.QRect(1, 80, 114, 361))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.scrollArea.setFont(font)

        self.scrollArea.setStyleSheet("background-color: transparent;\n"
"border-color: rgb(180, 212, 209);\n"
"\n"
"border :1px solid rgb(181, 212, 210);")

        # self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QTextEdit(self.scrollArea)
        m = convert((0, 0, 100, 1000), factor, y=True)
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 112, 359))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(int(round(6*factor)))
        self.scrollAreaWidgetContents.setFont(font)

        project = ""
        for j, i in enumerate(readproject()):
            project += f"TITLE {j+1}: "+str(i[0])+"\n\n"
            project += f"URL {j+1}: "+str(i[2].replace("\n","")) + "\n\n\n"

        # self.scrollArea_prj.setText(project)
        self.scrollAreaWidgetContents.setText(project)
        # self.scrollAreaWidgetContents_2.setText("hello")
        # self.scrollAreaWidgetContents.setWordWrap(True)
        # self.scrollAreaWidgetContents.setScaledContents(True)
        self.scrollAreaWidgetContents.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)





        #Hparams
        self.scrollArea_2 = QtWidgets.QScrollArea(Form)
        self.scrollArea_2.setWidgetResizable(True)
        m = convert((791, 59, 106, 441), factor, y=True)
        self.scrollArea_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.scrollArea_2.setGeometry(QtCore.QRect(790, 81, 109, 381))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.scrollArea_2.setFont(font)

#         self.scrollArea_2.setStyleSheet("background-color: transparent;\n"
# "border-color: rgb(180, 212, 209);")
        self.scrollArea_2.setStyleSheet("background-color: transparent;\n"
"border-color: rgb(180, 212, 209);\n"
"\n"
"border :1px solid rgb(181, 212, 210);")

        # self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_3 = QtWidgets.QTextEdit(self.scrollArea_2)
        m = convert((0, 0, 100, 1000), factor, y=True)
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 107, 379))
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 112, 359))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(int(round(6*factor)))
        self.scrollAreaWidgetContents_3.setFont(font)
        f = open(ai_info)
        parsed = json.load(f)
        data = json.dumps(parsed, indent=4, sort_keys=True)
        self.scrollAreaWidgetContents_3.setText(data)
        # self.scrollAreaWidgetContents_2.setText("hello")
        # self.scrollAreaWidgetContents_3.setWordWrap(True)
        # self.scrollAreaWidgetContents_3.setScaledContents(True)
        self.scrollAreaWidgetContents_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_3)





        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.addItems(DownloadsFolderPictures)
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.comboBox.setFont(font)
        # self.comboBox.setGeometry(QtCore.QRect(200, 414, 220, 23))
        m = convert((145, 452, 275, 21), factor, y=True)
        self.comboBox.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        self.comboBox.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(Form)
        self.comboBox_2.addItems(UpdatedPictures)
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.comboBox_2.setFont(font)
        m = convert((485, 452, 275, 21), factor, y=True)
        self.comboBox_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        # self.comboBox_2.setGeometry(QtCore.QRect(480, 414, 220, 23))
        self.comboBox_2.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.comboBox_2.setObjectName("comboBox_2")
        self.Prev = QtWidgets.QPushButton(Form)
        # self.Prev.setGeometry(QtCore.QRect(200, 440, 72, 23))
        m = convert((145, 476, 67, 20), factor, y=True)
        self.Prev.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3])) 
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Prev.setFont(font)
        self.Prev.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Prev.setObjectName("Prev")
        self.Open = QtWidgets.QPushButton(Form)
        # self.Open.setGeometry(QtCore.QRect(274, 440, 72, 23))
        m = convert((284, 476, 67, 20), factor, y=True)
        self.Open.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Open.setFont(font)
        self.Open.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Open.setObjectName("Open")
        self.Next = QtWidgets.QPushButton(Form)
        # self.Next.setGeometry(QtCore.QRect(348, 440, 72, 23))
        m = convert((353, 476, 67, 20), factor, y=True)
        self.Next.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Next.setFont(font)
        self.Next.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Next.setObjectName("Next")
        self.Prev_2 = QtWidgets.QPushButton(Form)
        m = convert((485, 476, 67, 20), factor, y=True)
        self.Prev_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Prev_2.setGeometry(QtCore.QRect(480, 440, 72, 23))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Prev_2.setFont(font)
        self.Prev_2.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Prev_2.setObjectName("Prev_2")
        self.Open_2 = QtWidgets.QPushButton(Form)
        m = convert((624, 476, 67, 20), factor, y=True)
        self.Open_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Open_2.setGeometry(QtCore.QRect(554, 440, 72, 23))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Open_2.setFont(font)
        self.Open_2.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Open_2.setObjectName("Open_2")
        self.Next_2 = QtWidgets.QPushButton(Form)
        m = convert((693, 476, 67, 20), factor, y=True)
        self.Next_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Next_2.setGeometry(QtCore.QRect(628, 440, 72, 23))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Next_2.setFont(font)
        self.Next_2.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Next_2.setObjectName("Next_2")
        self.Refresh = QtWidgets.QPushButton(Form)
        m = convert((3, 478, 110, 21), factor, y=True)
        self.Refresh.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Refresh.setGeometry(QtCore.QRect(3, 454, 110, 21))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Refresh.setFont(font)
        self.Refresh.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Refresh.setObjectName("Refresh")
        self.Open_Dir = QtWidgets.QPushButton(Form)
        m = convert((3, 454, 110, 21), factor, y=True)
        self.Open_Dir.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Open_Dir.setGeometry(QtCore.QRect(3, 478, 110, 21))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Open_Dir.setFont(font)
        self.Open_Dir.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Open_Dir.setObjectName("Open_Dir")
        self.Title = QtWidgets.QLabel(Form)
        m = convert((340, 11, 161, 29), factor, y=True)
        self.Title.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Title.setGeometry(QtCore.QRect(340, 11, 161, 29))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(int(round(14*factor)))
        self.Title.setFont(font)
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setObjectName("Title")
        self.verticalSlider = QtWidgets.QSlider(Form)

        m = convert((120, 60, 21, 441), factor, y=True)
        self.verticalSlider.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.verticalSlider.setGeometry(QtCore.QRect(134, 97, 22, 383))
        self.verticalSlider.setStyleSheet("color: rgb(181, 212, 209);")
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.verticalSlider_2 = QtWidgets.QSlider(Form)

        m = convert((762, 60, 21, 441), factor, y=True)
        self.verticalSlider_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.verticalSlider_2.setGeometry(QtCore.QRect(744, 97, 21, 383))
        self.verticalSlider_2.setStyleSheet("color: rgb(181, 212, 209);")
        self.verticalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.Sch_1 = QtWidgets.QLabel(Form)
        m = convert((420, 60, 65, 16), factor, y=True)
        self.Sch_1.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Sch_1.setGeometry(QtCore.QRect(199, 80, 220, 16))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Sch_1.setFont(font)
        self.Sch_1.setStyleSheet("background-color: transparent;\n"
"color: rgb(181, 212, 209);")
        self.Sch_1.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.Sch_1.setObjectName("Sch_1")
        self.Sch_2 = QtWidgets.QLabel(Form)
        m = convert((420, 80, 65, 20), factor, y=True)
        self.Sch_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Sch_2.setGeometry(QtCore.QRect(480, 80, 220, 16))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Sch_2.setFont(font)
        self.Sch_2.setStyleSheet("background-color: transparent;\n"
"color: rgb(181, 212, 209);")
        self.Sch_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Sch_2.setObjectName("Sch_2")
        self.Prj_info = QtWidgets.QLabel(Form)
        m = convert((0, 40, 111, 21), factor, y=True)
        self.Prj_info.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Prj_info.setGeometry(QtCore.QRect(0, 40, 111, 21))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(int(round(factor*9)))
        self.Prj_info.setFont(font)
        self.Prj_info.setStyleSheet("background-color: transparent;")
        self.Prj_info.setAlignment(QtCore.Qt.AlignCenter)
        self.Prj_info.setObjectName("Prj_info")
        self.Hparams = QtWidgets.QLabel(Form)

        m = convert((790, 40, 111, 21), factor, y=True)
        self.Hparams.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.Hparams.setGeometry(QtCore.QRect(790, 40, 111, 21))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(int(round(factor*9)))
        self.Hparams.setFont(font)
        self.Hparams.setStyleSheet("background-color: transparent;")
        self.Hparams.setAlignment(QtCore.Qt.AlignCenter)
        self.Hparams.setObjectName("Hparams")




        self.horizontalSlider = QtWidgets.QSlider(Form)

        m = convert((426, 100, 22, 401), factor, y=True)
        self.horizontalSlider.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.horizontalSlider.setGeometry(QtCore.QRect(200, 474, 221, 25))
        self.horizontalSlider.setStyleSheet("color: rgb(183, 129, 255);")
        self.horizontalSlider.setOrientation(QtCore.Qt.Vertical)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider_2 = QtWidgets.QSlider(Form)

        m = convert((453, 100, 22, 401), factor, y=True)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # self.horizontalSlider_2.setGeometry(QtCore.QRect(480, 474, 221, 25))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")



        self.comboBox_3 = QtWidgets.QComboBox(Form)
        m = convert((3, 428, 110, 23), factor, y=True)
        self.comboBox_3.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        # try:
        project_files_norm = self.get_avalible_project_files()
        # except:
        # project_files_norm = ["hi"] #I can add the filepaths to json file
        self.comboBox_3.addItems(project_files_norm)
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.comboBox_3.setFont(font)
        # self.comboBox_3.setGeometry(QtCore.QRect(3, 428, 110, 23))
        self.comboBox_3.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.comboBox_3.setObjectName("comboBox_3")


        self.Print = QtWidgets.QPushButton(Form)
        m = convert((214, 476, 68, 20), factor, y=True)
        self.Print.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Print.setFont(font)
        self.Print.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Print.setObjectName("Print")
        self.Print_2 = QtWidgets.QPushButton(Form)
        m = convert((554, 476, 68, 20), factor, y=True)
        self.Print_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.Print_2.setFont(font)
        self.Print_2.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.3867, cy:0.392045, radius:0.825346, fx:0.110837, fy:0.125, stop:0.123153 rgba(74, 115, 132, 255), stop:0.817734 rgba(24, 35, 52, 255));\n"
"\n"
"border :1px solid rgb(181, 212, 210);")
        self.Print_2.setObjectName("Print_2")




        self.Title_2 = QtWidgets.QLabel(Form)
        m = convert((600, 11, 161, 29), factor, y=True)
        self.Title_2.setGeometry(QtCore.QRect(m[0], m[1], m[2], m[3]))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(int(round(14*factor)))
        self.Title_2.setFont(font)
        self.Title_2.setStyleSheet("background-color: transparent;\ncolor: rgb(135, 207, 95);")
        self.Title_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
        self.Title_2.setObjectName("Title_2")




        # Form.setFixedSize(1440, 900)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.Open_Dir.clicked.connect(self.open_project)
        self.Refresh.clicked.connect(self.refresh_data)
        self.Next.clicked.connect(self.NextPhoto_1)
        self.Next_2.clicked.connect(self.NextPhoto_2)
        self.Open.clicked.connect(self.OpenPhoto_1)
        self.Open_2.clicked.connect(self.OpenPhoto_2)
        self.Prev.clicked.connect(self.PreviousPhoto_1)
        self.Prev_2.clicked.connect(self.PreviousPhoto_2)
        self.verticalSlider.valueChanged.connect(self.scaletext)
        self.verticalSlider_2.valueChanged.connect(self.scaletext_2)
        self.horizontalSlider.valueChanged.connect(self.photoScroll_1)
        self.horizontalSlider_2.valueChanged.connect(self.photoScroll_2)
        self.Print.clicked.connect(self.Print_Picture_1)
        self.Print_2.clicked.connect(self.Print_Picture_2)



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "CHANNEL 1"))
        self.Prev.setText(_translate("Form", "PREV"))
        self.Open.setText(_translate("Form", "OPEN"))
        self.Next.setText(_translate("Form", "NEXT"))
        self.Prev_2.setText(_translate("Form", "PREV"))
        self.Open_2.setText(_translate("Form", "OPEN"))
        self.Next_2.setText(_translate("Form", "NEXT"))
        self.Refresh.setText(_translate("Form", "REFRESH"))
        self.Open_Dir.setText(_translate("Form", "OPEN"))
        self.Title.setText(_translate("Form", "CHANNEL 1 NOTES"))
        self.Sch_1.setText(_translate("Form", "◀ SCH 01"))
        self.Sch_2.setText(_translate("Form", "SCH 02 ▶"))
        self.Prj_info.setText(_translate("Form", "PROJECT INFOMATION"))
        self.Hparams.setText(_translate("Form", "A.I. HYPER PARAMS"))
        self.Print.setText(_translate("Form", "PRINT"))
        self.Print_2.setText(_translate("Form", "PRINT"))
        self.Title_2.setText(_translate("Form", "VERSION 4"))



    def Print_Picture_1(self):
        path = self.comboBox.currentText()
        picture  = f"{airnotes}/{path}"
        print(picture)
        subprocess.call(["open", picture])
        # # picture = "Picture 8.png"
        # # picture = "z-3.jpg"

        # html_code = f"""
        # <!DOCTYPE html>
        # <html>
        # <head>
        #     <title>Index</title>
        # </head>
        # <body>
        #     <img src="{picture}"/>
        # </body>
        # </html>
        # """
        # with open("index.html", "w") as file:
        #     file.write(html_code)
        #     file.close()

        # webbrowser.open(url, new=0, autoraise=True)


    def Print_Picture_2(self):
        path = self.comboBox_2.currentText()
        picture = f"{updated_images}/{path}"
        print(picture)
        subprocess.call(["open", picture])



        # path = self.comboBox_2.currentText()
        # picture = f"{updated_images}/{path}"


        # # picture = "Picture 8.png"
        # # picture = "z-3.jpg"

        # html_code = f"""
        # <!DOCTYPE html>
        # <html>
        # <head>
        #     <title>Index</title>
        # </head>
        # <body>
        #     <img src="{picture}"/>
        # </body>
        # </html>
        # """
        # with open("index.html", "w") as file:
        #     file.write(html_code)
        #     file.close()


        # webbrowser.open(url, new=0, autoraise=True)


    def open_project(self):


        real_path = []
        for (root, dirs, file) in os.walk(workspace):
            for f in file:
                if '.txt' in f:
                    real_path.append(str(f"{root}/{f}"))



        path = self.comboBox_3.currentText()
        # print("path", path)
        
        pos = self.comboBox_3.currentIndex()
        for j, i in enumerate(real_path):
            if pos == j:
                path_ = i

        project = ""
        for j, i in enumerate(readproject(path_)):
            project += f"TITLE {j+1}: "+str(i[0])+"\n\n"
            project += f"URL {j+1}: "+str(i[2].replace("\n","")) + "\n\n\n"

        self.scrollAreaWidgetContents.setText(project)
        mixer.music.load(f"SoundEffects/StartAudio.mp3")
        mixer.music.play()



    def refresh_data(self):

        project = ""
        for j, i in enumerate(readproject()):
            project += f"TITLE {j+1}: "+str(i[0])+"\n\n"
            project += f"URL {j+1}: "+str(i[2].replace("\n","")) + "\n\n\n"

        self.comboBox.clear()
        self.comboBox_2.clear()
        self.comboBox.addItems(DownloadsFolderPictures)
        self.comboBox_2.addItems(UpdatedPictures)
        self.scrollAreaWidgetContents.setText(project)
        Responses = ["Refresh1.mp3",
                      "Refresh2.mp3",
                      ]

        variation = random.choice(list(Responses))
        mixer.music.load(f"SoundEffects/{variation}")
        mixer.music.play()








    def scaletext(self, value):
        value = 100 - value
        path = self.comboBox.currentText()
        self.m_original_pixmap = QtGui.QPixmap(str(f"{airnotes}/{path}"))
        new_pix = QtGui.QPixmap(self.m_original_pixmap.size())
        new_pix.fill(QtCore.Qt.transparent)
        painter = QtGui.QPainter(new_pix)
        painter.setOpacity(value * 0.01)
        painter.drawPixmap(QtCore.QPoint(), self.m_original_pixmap)
        painter.end()
        self.Photo_1.setPixmap(new_pix)
        mixer.music.load(f"SoundEffects/Transparent.mp3")
        mixer.music.play()

    def scaletext_2(self, value):
        value = 100 - value 
        path = self.comboBox_2.currentText()
        self.m_original_pixmap = QtGui.QPixmap(str(f"{updated_images}/{path}"))
        new_pix = QtGui.QPixmap(self.m_original_pixmap.size())
        new_pix.fill(QtCore.Qt.transparent)
        painter = QtGui.QPainter(new_pix)
        painter.setOpacity(value * 0.01)
        painter.drawPixmap(QtCore.QPoint(), self.m_original_pixmap)
        painter.end()
        self.Photo_2.setPixmap(new_pix)
        mixer.music.load(f"SoundEffects/Transparent.mp3")
        mixer.music.play()


    def photoScroll_1(self, value):
        value = value 
        value = round((value/100)*len(DownloadsFolderPictures))
        for position, names in enumerate(DownloadsFolderPictures):
            if position == value:
                self.comboBox.setCurrentIndex(value)
                self.Photo_1.setPixmap(QtGui.QPixmap(str(f"{airnotes}/{names}")))
                break

    def photoScroll_2(self, value):
        value = value 
        value = round((value/100)*len(UpdatedPictures))
        for position, names in enumerate(UpdatedPictures):
            if position == value:
                self.comboBox_2.setCurrentIndex(value)
                self.Photo_2.setPixmap(QtGui.QPixmap(str(f"{updated_images}/{names}")))
                break



    def OpenPhoto_1(self):
        mixer.music.load(f"SoundEffects/Refresh3.mp3")
        mixer.music.play()
        path = self.comboBox.currentText()
        self.Photo_1.setPixmap(QtGui.QPixmap(str(f"{airnotes}/{path}")))

    def OpenPhoto_2(self):
        mixer.music.load(f"SoundEffects/Refresh3.mp3")
        mixer.music.play()
        path = self.comboBox_2.currentText()
        self.Photo_2.setPixmap(QtGui.QPixmap(str(f"{updated_images}/{path}")))


    def NextPhoto_1(self):
        mixer.music.load(f"SoundEffects/ButtonPress.mp3")
        mixer.music.play()
        try:
            path = self.comboBox.currentText()
            for position, names in enumerate(DownloadsFolderPictures):
                if path == names:
                    image = DownloadsFolderPictures[position+1]
                    break

            pos = self.comboBox.currentIndex()
            if pos+2 == self.comboBox.count():
                pos = 0
            self.comboBox.setCurrentIndex(pos+1)
            self.Photo_1.setPixmap(QtGui.QPixmap(str(f"{airnotes}/{image}")))
        except (IndexError, UnboundLocalError):
            print("IndexError")


    def NextPhoto_2(self):
        mixer.music.load(f"SoundEffects/ButtonPress.mp3")
        mixer.music.play()
        try:
            path = self.comboBox_2.currentText()
            for position, names in enumerate(UpdatedPictures):
                if path == names:
                    image = UpdatedPictures[position+1]
                    break

            pos = self.comboBox_2.currentIndex()
            if pos+2 == self.comboBox_2.count():
                pos = 0
            self.comboBox_2.setCurrentIndex(pos+1)
            self.Photo_2.setPixmap(QtGui.QPixmap(str(f"{updated_images}/{image}")))
        except (IndexError, UnboundLocalError):
            print("IndexError")

    def PreviousPhoto_1(self):
        try:
            path = self.comboBox.currentText()
            for position, names in enumerate(DownloadsFolderPictures):
                if path == names:
                    image = DownloadsFolderPictures[position-1]
                    # print(image)
                    break

            pos = self.comboBox.currentIndex()
            # print(pos)
            if pos == -1:
                pos = self.comboBox.count()
                image = DownloadsFolderPictures[-1]

            self.comboBox.setCurrentIndex(pos-1)
            self.Photo_1.setPixmap(QtGui.QPixmap(str(f"{airnotes}/{image}")))
            mixer.music.load(f"SoundEffects/ButtonPress.mp3")
            mixer.music.play()
        except (IndexError, UnboundLocalError):
            pass


    def PreviousPhoto_2(self):
        try:
            path = self.comboBox_2.currentText()
            for position, names in enumerate(UpdatedPictures):
                if path == names:
                    image = UpdatedPictures[position-1]
                    # print(image)
                    break

            pos = self.comboBox_2.currentIndex()
            # print(pos)
            if pos == -1:
                pos = self.comboBox_2.count()
                image = UpdatedPictures[-1]

            self.comboBox_2.setCurrentIndex(pos-1)
            self.Photo_2.setPixmap(QtGui.QPixmap(str(f"{updated_images}/{image}")))
            mixer.music.load(f"SoundEffects/ButtonPress.mp3")
            mixer.music.play()
        except (IndexError, UnboundLocalError):
            pass

    def get_avalible_project_files(self, path = workspace):
        pathways = []
        for (root, dirs, file) in os.walk(path):
            for f in file:
                if '.txt' in f:
                    pathways.append(str(f"{root}/{f}"))

        # for i in pathways:
        #     with open(str(i), "r") as file:
        #         file.close()

        spaces = []
        for j, i in enumerate(pathways):
            x = str(i).replace(".txt", "").replace(f"{path}/", "")
            if "/" in x:
                spaces.append(len(f"{j + 1}{x.rsplit('/', 1)[:-1][0]}{x.rsplit('/', 1)[-1]}"))
            else:
                spaces.append(len(f"{j + 1}{x}"))

        spaces.sort(reverse=True)
        largest = spaces[0]


        for j, i in enumerate(pathways):
            # f = open(str(i), "r")
            # x = f.readline()
            # myfile = io.open(i, "r", encoding="utf-8")
            # filecontents = myfile.readlines()
        
        # f.close()
            project_files_norm = []
            for j, i in enumerate(pathways):
                file = io.open(i, "r", encoding="utf-8")
                length = int(len(file.readlines()))
                if length == 0:
                    items = str(f"articles: {length}")
                else:
                    items = str(f"articles: {length}")

                file.close()

                x = str(i).replace(".txt", "").replace(f"{path}/", "")
                if "/" in x:
                    space = len(f"{j + 1}{x.rsplit('/', 1)[:-1][0]}{x.rsplit('/', 1)[-1]}")
                    y = (largest - space + 5)
                    norm = f"{j + 1} {x.rsplit('/', 1)[:-1][0]}/{x.rsplit('/', 1)[-1]}{' '*y}{items}"
                    # print(norm)
                    project_files_norm.append(str(norm))
                else:
                    space = len(f"{j + 1}{x}")
                    y = (largest - space + 6)
                    norm =f"{j + 1} {x}{' '*y}{items}"
                    # print(norm)
                    project_files_norm.append(str(norm))

        #     print(pathways)
            return project_files_norm

        return ["hi"]



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
